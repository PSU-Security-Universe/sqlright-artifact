#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define ff__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer ff__create_buffer
#endif

#ifdef yy_delete_buffer
#define ff__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer ff__delete_buffer
#endif

#ifdef yy_scan_buffer
#define ff__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer ff__scan_buffer
#endif

#ifdef yy_scan_string
#define ff__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string ff__scan_string
#endif

#ifdef yy_scan_bytes
#define ff__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes ff__scan_bytes
#endif

#ifdef yy_init_buffer
#define ff__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer ff__init_buffer
#endif

#ifdef yy_flush_buffer
#define ff__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer ff__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define ff__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state ff__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define ff__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer ff__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define ff_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state ff_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define ff_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state ff_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define ff_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack ff_ensure_buffer_stack
#endif

#ifdef yylex
#define ff_lex_ALREADY_DEFINED
#else
#define yylex ff_lex
#endif

#ifdef yyrestart
#define ff_restart_ALREADY_DEFINED
#else
#define yyrestart ff_restart
#endif

#ifdef yylex_init
#define ff_lex_init_ALREADY_DEFINED
#else
#define yylex_init ff_lex_init
#endif

#ifdef yylex_init_extra
#define ff_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra ff_lex_init_extra
#endif

#ifdef yylex_destroy
#define ff_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy ff_lex_destroy
#endif

#ifdef yyget_debug
#define ff_get_debug_ALREADY_DEFINED
#else
#define yyget_debug ff_get_debug
#endif

#ifdef yyset_debug
#define ff_set_debug_ALREADY_DEFINED
#else
#define yyset_debug ff_set_debug
#endif

#ifdef yyget_extra
#define ff_get_extra_ALREADY_DEFINED
#else
#define yyget_extra ff_get_extra
#endif

#ifdef yyset_extra
#define ff_set_extra_ALREADY_DEFINED
#else
#define yyset_extra ff_set_extra
#endif

#ifdef yyget_in
#define ff_get_in_ALREADY_DEFINED
#else
#define yyget_in ff_get_in
#endif

#ifdef yyset_in
#define ff_set_in_ALREADY_DEFINED
#else
#define yyset_in ff_set_in
#endif

#ifdef yyget_out
#define ff_get_out_ALREADY_DEFINED
#else
#define yyget_out ff_get_out
#endif

#ifdef yyset_out
#define ff_set_out_ALREADY_DEFINED
#else
#define yyset_out ff_set_out
#endif

#ifdef yyget_leng
#define ff_get_leng_ALREADY_DEFINED
#else
#define yyget_leng ff_get_leng
#endif

#ifdef yyget_text
#define ff_get_text_ALREADY_DEFINED
#else
#define yyget_text ff_get_text
#endif

#ifdef yyget_lineno
#define ff_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno ff_get_lineno
#endif

#ifdef yyset_lineno
#define ff_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno ff_set_lineno
#endif

#ifdef yyget_column
#define ff_get_column_ALREADY_DEFINED
#else
#define yyget_column ff_get_column
#endif

#ifdef yyset_column
#define ff_set_column_ALREADY_DEFINED
#else
#define yyset_column ff_set_column
#endif

#ifdef yywrap
#define ff_wrap_ALREADY_DEFINED
#else
#define yywrap ff_wrap
#endif

#ifdef yyget_lval
#define ff_get_lval_ALREADY_DEFINED
#else
#define yyget_lval ff_get_lval
#endif

#ifdef yyset_lval
#define ff_set_lval_ALREADY_DEFINED
#else
#define yyset_lval ff_set_lval
#endif

#ifdef yyget_lloc
#define ff_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc ff_get_lloc
#endif

#ifdef yyset_lloc
#define ff_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc ff_set_lloc
#endif

#ifdef yyalloc
#define ff_alloc_ALREADY_DEFINED
#else
#define yyalloc ff_alloc
#endif

#ifdef yyrealloc
#define ff_realloc_ALREADY_DEFINED
#else
#define yyrealloc ff_realloc
#endif

#ifdef yyfree
#define ff_free_ALREADY_DEFINED
#else
#define yyfree ff_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ff_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 209
#define YY_END_OF_BUFFER 210
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[771] =
    {   0,
        0,    0,    0,    0,  205,  205,  210,  208,  207,  207,
      208,  208,   72,  203,  151,  140,   59,   32,  119,   37,
      157,  179,  200,    8,   20,  186,   11,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  166,  174,  109,  205,  206,  207,    1,    0,  200,
      199,  198,  135,   23,  202,  202,  202,  202,  202,  202,
      202,  182,  202,  202,  202,  202,   71,  202,  202,  202,
      202,  202,  202,  202,  202,  150,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  123,  202,  202,  185,   75,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  113,  202,
      202,   43,  202,   55,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  169,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  205,  204,  201,  198,  202,  133,  202,  202,
      202,   94,  202,  118,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      171,   65,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,   79,  202,  202,  202,  202,  202,  202,  202,

      202,  202,  202,  202,   81,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  142,  202,
      202,  202,  146,  202,  202,  202,  202,  202,  202,  202,
      155,  202,  202,  156,  202,  202,  202,  202,   99,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,   77,  202,  202,
       88,  202,  202,  202,  202,   52,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  110,

      154,  107,  202,  202,  202,  202,  202,  188,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  190,  202,  202,
      202,  116,  202,  147,   86,  202,  202,   30,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      191,   26,  202,  127,  202,  112,  202,  202,  202,  202,
      202,  202,  202,  202,  178,  202,  202,  138,  177,   15,
      125,  139,  202,  202,  129,  202,  202,  202,  202,  202,
      202,  202,  202,  202,   67,  202,  160,  202,  202,  202,
      202,  202,    5,  202,  202,  202,  202,  102,  202,  202,
      202,  202,  202,  202,  137,  202,  202,  202,  202,  202,

      202,  202,  202,  202,  202,    4,  103,  202,  202,   69,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,   56,  167,  202,  202,   12,    6,  202,   46,  202,
      189,  122,  202,  202,  202,  202,  202,  170,  202,  202,
       24,  202,  202,  202,  202,  202,  202,  106,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,   38,  202,   42,  111,  193,
      202,   92,  202,  202,   58,  202,  202,  202,   57,  202,
      183,  202,  202,  202,  202,  202,  202,   10,  115,  202,
      136,  202,   34,  202,   48,  202,  202,   93,  202,   84,

      202,  202,  202,   13,  159,  202,  202,  202,  202,   87,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  121,  202,  202,  202,  202,  202,
      202,  202,   83,  202,  202,  202,  148,  202,  202,  202,
       40,  202,  202,   21,  202,   22,  202,    9,   28,  202,
      202,  202,  114,  202,  202,  202,  202,  165,  202,  202,
      202,  202,  202,  202,  100,  202,  202,   45,  202,    2,
      202,   18,  202,  175,  202,   97,  202,  202,  202,  158,
      197,  141,  202,  202,  202,  202,  176,  202,  202,  202,
      181,  202,  202,   41,  202,  202,  202,  202,   90,   14,

      202,  202,  202,  202,  202,  202,  202,  202,  149,  202,
      202,  202,  194,  202,   66,   53,    3,  202,  202,  202,
      202,  202,  202,  153,  202,  202,   39,  202,   85,  202,
       50,  202,  195,  202,  202,  134,  145,  132,  202,   25,
      202,  202,  202,   33,  130,  105,  202,  202,   76,  120,
      202,   70,  202,  202,  124,  202,   61,  202,  202,   91,
      202,   60,  202,   73,  202,   89,  202,  202,  202,   27,
      196,   19,   44,  202,  202,  202,   47,  202,  202,  202,
      117,  202,  202,  202,  202,   63,  202,  202,  202,   35,
      202,  202,  202,  202,  187,   98,  202,  180,  202,  202,

      172,  202,   49,  202,   68,   78,  202,  202,  126,  202,
      202,  202,  202,   51,  202,   29,  202,  202,  202,  202,
      202,  202,   62,  202,   74,  161,  202,  202,  192,  202,
      202,  143,  202,  128,  152,  202,  202,  202,  162,   64,
      168,   95,  202,  184,  202,  131,   17,   96,   80,   31,
      202,  202,  163,   82,   16,  104,  202,   36,  164,  202,
      202,  144,  108,  173,   54,  101,  202,  202,    7,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,    1,   17,   18,
       19,   20,    1,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,    1,   48,   49,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   46,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    1,    2,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    4,    1,    1,    1,    1,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    1,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static const flex_int16_t yy_base[775] =
    {   0,
        0,    0,    0,    0,  323,  320,  319, 1547,   74,   76,
      296,    0, 1547, 1547, 1547, 1547, 1547, 1547, 1547,  280,
      274, 1547,   66, 1547,  269, 1547,  268,   60,   56,   67,
      118,  116,  173,   49,   68,  118,   55,   68,  133,  174,
      195,  241,  121,    0,  192,  289,  336,  187,  120,  226,
       72, 1547, 1547, 1547,    0,  199,  104, 1547,  195,   96,
      181,  180, 1547, 1547,    0,   60,   80,   96,  188,  116,
      108,  132,  233,  185,  126,  163,    0,  165,  240,  236,
      239,  169,  165,  297,  183,  221,  228,  237,  253,  239,
      319,  309,  248,  340,  246,  301,  251,  289,  289,  338,

      287,    0,  303,  313,  391,  347,  353,  338,  347,  362,
      365,  383,  349,  397,  358,  365,  369,  396,  398,  408,
      408,    0,  397,  418,  403,  419,  408,  423,  415,  462,
      416,  452,  448,  444,  459,  460,  455,  468,  458,  468,
      460,    0,  468,  466,  511,  476,  475,  474,  483,  494,
      503,  508,    0, 1547, 1547,  149,  512,    0,  519,  510,
      521,    0,  526,    0,  513,  508,  523,  532,  522,  530,
      539,  518,  534,  517,  524,  563,  516,  545,  529,  531,
        0,  564,  579,  570,  574,  580,  581,  570,  586,  582,
      586,  590,    0,  578,  581,  590,  577,  579,  579,  581,

      585,  601,  607,  597,  630,  606,  617,  616,  632,  632,
      624,  628,  639,  640,  626,  642,  636,  645,  646,  637,
      632,  640,  636,  636,  637,  653,  651,  668,  655,  661,
        0,  657,  661,  668,  673,  686,  696,  695,  693,  690,
      698,  685,  696,  701,  703,  692,  691,  709,  700,  707,
      703,  695,  696,  713,  719,  709,  702,  709,  734,  719,
        0,  708,  713,  741,  737,    0,  748,  745,  742,  749,
      739,  758,  761,  753,  753,  764,  755,  762,  772,  760,
      767,  772,  754,  764,  776,  773,  766,  771,  771,  791,
      795,  790,  799,  815,  807,  804,  818,  819,  824,    0,

        0,  825,  816,  815,  828,  818,  811,    0,  812,  814,
      829,  822,  815,  819,  833,  826,  821,    0,  840,  835,
      836,    0,  836,    0,    0,  857,  855,    0,  859,  856,
      860,  880,  877,  878,  864,  881,  866,  872,  883,  880,
        0,  870,  875,    0,  878,    0,  875,  890,  871,  887,
      879,  897,  882,  922,    0,  890,  890,    0,    0,    0,
        0,    0,  884,  894,    0,  888,  901,  912,  930,  917,
      933,  927,  925,  926,    0,  936,  927,  929,  943,  934,
      932,  933,    0,  943,  948,  953,  950,    0,  938,  944,
      942,  948,  961,  946,    0,  960,  954,  951,  986,  988,

      983,  985,  991,  996,  987,    0,    0,  983,  997,    0,
      984,  985, 1002,  995,  989, 1004,  992, 1006, 1010, 1010,
     1008,    0,    0, 1012, 1003, 1005,    0, 1007,    0, 1013,
        0,    0, 1019, 1021, 1008, 1004, 1048,    0, 1049, 1052,
        0, 1043, 1057, 1056, 1053, 1045, 1059,    0, 1051, 1065,
     1055, 1050, 1051, 1065, 1066, 1060, 1059, 1069, 1066, 1071,
     1074, 1058, 1061, 1062, 1079,    0, 1066,    0,    0,    0,
     1063,    0, 1081, 1084, 1090, 1106, 1110, 1108, 1115, 1120,
        0, 1119, 1103, 1119, 1106, 1121, 1115,    0,    0, 1123,
        0, 1116,    0, 1125,    0, 1117, 1131,    0, 1119,    0,

     1125, 1115, 1122,    0,    0, 1147, 1134, 1121, 1123,    0,
     1123, 1140, 1141, 1144, 1166, 1164, 1160, 1173, 1171, 1161,
     1178, 1178, 1175, 1184,    0, 1168, 1186, 1183, 1184, 1171,
     1177, 1183,    0, 1188, 1180, 1190,    0, 1195, 1179, 1199,
        0, 1178, 1181,    0, 1184,    0, 1192,    0,    0, 1194,
     1204, 1207,    0, 1209, 1214, 1232, 1236,    0, 1220, 1229,
     1222, 1238, 1226, 1227,    0, 1241, 1244,    0, 1245,    0,
     1244,    0, 1241,    0, 1231,    0, 1243, 1239, 1230,    0,
        0,    0, 1254, 1252, 1246, 1255,  114, 1243, 1257, 1246,
        0, 1242, 1248,    0, 1268, 1275, 1282, 1290,    0,    0,

     1283, 1288, 1291, 1292, 1277, 1294, 1303, 1291,    0, 1301,
     1304, 1290,    0, 1289,    0,    0,    0, 1296, 1299, 1311,
     1311, 1290, 1297,    0, 1312, 1304,    0, 1315,    0, 1301,
        0, 1304,    0, 1304, 1318,    0,    0, 1324, 1324,    0,
     1328, 1329, 1344,    0,    0,    0, 1351, 1356,    0,    0,
     1340,    0, 1357, 1340,    0, 1349,    0, 1344, 1345,    0,
     1354,    0, 1354,    0, 1365,    0, 1349, 1365, 1359,    0,
        0,    0,    0, 1357, 1359, 1359,    0, 1353, 1362, 1375,
        0, 1360, 1368, 1357, 1364,    0, 1368, 1376, 1369,    0,
     1402, 1404, 1409, 1406,    0,    0, 1404,    0, 1402, 1416,

        0, 1408,    0, 1421,    0,    0, 1419, 1418,    0, 1421,
     1402, 1423, 1409,    0, 1406,    0, 1417, 1425, 1419, 1429,
     1415, 1431,    0, 1437,    0,    0, 1415, 1436,    0, 1438,
     1440,    0, 1431,    0,    0, 1444, 1429, 1455,    0,    0,
        0,    0, 1449,    0, 1453,    0,    0,    0,    0,    0,
     1456, 1457,    0,    0,    0,    0, 1466,    0,    0, 1476,
     1474,    0,    0,    0,    0,    0, 1468, 1480,    0, 1547,
     1534, 1538,  105, 1542
    } ;

static const flex_int16_t yy_def[775] =
    {   0,
      770,    1,    1,    1,  771,  771,  770,  770,  770,  770,
      770,  772,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  770,  770,  770,  774,  770,  770,  770,  772,  770,
      770,  770,  770,  770,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  774,  770,  770,  770,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,

      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,  773,    0,
      770,  770,  770,  770
    } ;

static const flex_int16_t yy_nxt[1623] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   44,   51,   44,   52,   53,   54,    8,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   44,   51,   57,   57,   57,   57,   62,
       73,   60,   66,   67,   74,   68,   99,   78,  100,  107,
       75,   69,  108,   70,   79,   76,  152,   71,   72,  157,

       77,   80,  101,  158,   81,   57,   57,   82,   65,   62,
       73,   60,   66,   67,   74,   68,   99,   78,  100,  107,
       75,   69,  108,   70,   79,   76,  152,   71,   72,  157,
       77,   80,  101,  158,   81,  159,   89,   82,   83,  162,
      148,  127,   84,  102,  103,  163,   85,   90,  149,   91,
      104,  105,   86,  109,  164,   87,  106,  110,  128,   92,
      169,  111,   88,  663,  156,  159,   89,  112,   83,  162,
      148,  127,   84,  102,  103,  163,   85,   90,  149,   91,
      104,  105,   86,  109,  164,   87,  106,  110,  128,   92,
      169,  111,   88,   93,  113,  156,   61,  112,  114,  155,

      170,   94,  115,  171,   95,  154,  180,   96,  116,  181,
       97,  167,  129,   98,  160,  117,  130,  118,  168,  144,
      145,  186,  146,   93,  113,  147,  131,  161,  114,  119,
      170,   94,  115,  171,   95,  120,  180,   96,  116,  181,
       97,  167,  129,   98,  160,  117,  130,  118,  168,  144,
      145,  186,  146,  150,  151,  147,  131,  161,  165,  119,
      172,  187,  188,  178,  173,  120,  121,  174,  175,  176,
      189,  177,  166,  179,  122,  190,  123,  191,  124,  199,
      203,  125,  126,  150,  151,  206,   64,   63,  165,   61,
      172,  187,  188,  178,  173,   60,  121,  174,  175,  176,

      189,  177,  166,  179,  122,  190,  123,  191,  124,  199,
      203,  125,  126,  132,   58,  206,  133,  134,  770,  182,
      207,  135,  183,  208,  136,  137,   56,  211,  184,   56,
      770,  196,  204,  770,  770,  185,  212,  197,  205,  192,
      770,  770,  193,  132,  194,  213,  133,  134,  198,  182,
      207,  135,  183,  208,  136,  137,  138,  211,  184,  195,
      139,  196,  204,  140,  141,  185,  212,  197,  205,  192,
      142,  200,  193,  143,  194,  213,  209,  201,  198,  210,
      221,  222,  223,  202,  770,  224,  138,  225,  230,  195,
      139,  234,  231,  140,  141,  226,  770,  227,  235,  770,

      142,  200,  770,  143,  770,  228,  209,  201,  236,  210,
      221,  222,  223,  202,  214,  224,  229,  225,  230,  215,
      232,  234,  231,  237,  216,  226,  217,  227,  235,  218,
      219,  238,  220,  242,  233,  228,  243,  239,  236,  240,
      241,  244,  245,  246,  214,  247,  229,  248,  250,  215,
      232,  249,  770,  237,  216,  770,  217,  770,  258,  218,
      219,  238,  220,  242,  233,  770,  243,  239,  262,  240,
      241,  244,  245,  246,  259,  247,  263,  248,  250,  264,
      265,  249,  251,  260,  252,  253,  266,  254,  258,  267,
      268,  261,  270,  271,  274,  255,  272,  256,  262,  279,

      257,  269,  770,  280,  259,  281,  263,  283,  273,  264,
      265,  282,  251,  260,  252,  253,  266,  254,  284,  267,
      268,  261,  270,  271,  274,  255,  272,  256,  287,  279,
      257,  269,  275,  280,  276,  281,  285,  283,  273,  277,
      288,  282,  286,  289,  290,  291,  292,  293,  284,  278,
      294,  295,  296,  297,  298,  302,  303,  304,  287,  305,
      308,  299,  275,  300,  276,  309,  285,  310,  311,  277,
      288,  770,  286,  289,  290,  291,  292,  293,  301,  278,
      294,  295,  296,  297,  298,  302,  303,  304,  306,  305,
      308,  299,  312,  300,  317,  309,  318,  310,  311,  313,

      319,  307,  321,  314,  315,  322,  323,  316,  301,  324,
      325,  326,  327,  328,  329,  331,  332,  333,  306,  320,
      334,  330,  312,  335,  317,  336,  318,  337,  338,  313,
      319,  307,  321,  314,  315,  322,  323,  316,  341,  324,
      325,  326,  327,  328,  329,  331,  332,  333,  342,  320,
      334,  330,  339,  335,  340,  336,  343,  337,  338,  344,
      345,  346,  347,  348,  349,  350,  351,  352,  341,  353,
      354,  356,  357,  358,  359,  360,  361,  362,  342,  363,
      355,  366,  339,  367,  340,  368,  343,  369,  364,  344,
      345,  346,  347,  348,  349,  350,  351,  352,  365,  353,

      354,  356,  357,  358,  359,  360,  361,  362,  370,  363,
      355,  366,  371,  367,  372,  368,  374,  369,  364,  375,
      376,  377,  378,  379,  380,  381,  373,  382,  365,  383,
      384,  385,  386,  387,  388,  389,  390,  391,  370,  392,
      393,  394,  371,  399,  372,  400,  374,  395,  401,  375,
      376,  377,  378,  379,  380,  381,  373,  382,  396,  383,
      384,  385,  386,  387,  388,  389,  390,  391,  397,  392,
      393,  394,  402,  399,  398,  400,  403,  395,  401,  404,
      405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
      416,  415,  417,  418,  421,  419,  422,  423,  397,  425,

      426,  424,  402,  427,  398,  428,  403,  420,  429,  404,
      405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
      416,  415,  417,  418,  421,  419,  422,  423,  430,  425,
      426,  424,  431,  427,  432,  428,  433,  420,  429,  434,
      435,  436,  437,  438,  439,  440,  441,  442,  443,  445,
      446,  447,  448,  449,  450,  451,  452,  453,  430,  454,
      455,  456,  431,  457,  432,  444,  433,  458,  459,  434,
      435,  436,  437,  438,  439,  440,  441,  442,  443,  445,
      446,  447,  448,  449,  450,  451,  452,  453,  460,  454,
      455,  456,  461,  457,  462,  444,  463,  458,  459,  464,

      465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
      475,  476,  477,  478,  479,  480,  481,  482,  460,  483,
      486,  487,  461,  488,  462,  489,  463,  490,  491,  464,
      465,  466,  467,  468,  469,  470,  471,  472,  473,  474,
      475,  476,  477,  478,  479,  480,  481,  482,  484,  483,
      486,  487,  492,  488,  493,  489,  494,  490,  491,  485,
      495,  496,  497,  498,  499,  500,  501,  502,  503,  504,
      505,  506,  507,  509,  510,  511,  508,  512,  484,  513,
      514,  515,  492,  516,  493,  517,  494,  518,  519,  485,
      495,  496,  497,  498,  499,  500,  501,  502,  503,  504,

      505,  506,  507,  509,  510,  511,  508,  512,  520,  513,
      514,  515,  521,  516,  522,  517,  523,  518,  519,  524,
      525,  526,  528,  529,  530,  531,  527,  532,  533,  534,
      535,  536,  537,  538,  539,  540,  541,  542,  520,  543,
      544,  545,  521,  546,  522,  547,  523,  548,  549,  524,
      525,  526,  528,  529,  530,  531,  527,  532,  533,  534,
      535,  536,  537,  538,  539,  540,  541,  542,  550,  543,
      544,  545,  551,  546,  552,  547,  553,  548,  549,  554,
      555,  556,  557,  558,  559,  560,  561,  562,  563,  564,
      565,  566,  567,  568,  569,  570,  571,  572,  550,  573,

      574,  575,  551,  576,  552,  577,  553,  578,  579,  554,
      555,  556,  557,  558,  559,  560,  561,  562,  563,  564,
      565,  566,  567,  568,  569,  570,  571,  572,  580,  573,
      574,  575,  581,  576,  582,  577,  583,  578,  579,  584,
      585,  586,  587,  588,  589,  590,  591,  592,  593,  594,
      595,  596,  597,  598,  599,  600,  770,  603,  580,  604,
      605,  606,  581,  607,  582,  608,  583,  601,  609,  584,
      585,  586,  587,  588,  589,  590,  591,  592,  593,  594,
      595,  596,  597,  598,  599,  600,  602,  603,  610,  604,
      605,  606,  611,  607,  612,  608,  613,  601,  609,  614,

      615,  616,  617,  618,  619,  620,  621,  622,  623,  624,
      625,  626,  627,  628,  629,  630,  602,  631,  610,  632,
      633,  634,  611,  635,  612,  636,  613,  637,  638,  614,
      615,  616,  617,  618,  619,  620,  621,  622,  623,  624,
      625,  626,  627,  628,  629,  630,  639,  631,  640,  632,
      633,  634,  641,  635,  642,  636,  643,  637,  638,  644,
      645,  646,  647,  648,  649,  650,  651,  652,  653,  654,
      655,  656,  657,  658,  659,  660,  639,  661,  640,  662,
      664,  665,  641,  666,  642,  667,  643,  668,  669,  644,
      645,  646,  647,  648,  649,  650,  651,  652,  653,  654,

      655,  656,  657,  658,  659,  660,  670,  661,  671,  662,
      664,  665,  672,  666,  673,  667,  674,  668,  669,  675,
      676,  677,  678,  679,  680,  681,  682,  683,  684,  685,
      686,  687,  688,  689,  690,  691,  670,  692,  671,  693,
      694,  695,  672,  696,  673,  697,  674,  698,  699,  675,
      676,  677,  678,  679,  680,  681,  682,  683,  684,  685,
      686,  687,  688,  689,  690,  691,  700,  692,  701,  693,
      694,  695,  702,  696,  703,  697,  704,  698,  699,  705,
      706,  707,  708,  709,  710,  711,  712,  713,  714,  715,
      716,  717,  718,  719,  720,  721,  700,  722,  701,  723,

      724,  725,  702,  726,  703,  727,  704,  728,  729,  705,
      706,  707,  708,  709,  710,  711,  712,  713,  714,  715,
      716,  717,  718,  719,  720,  721,  730,  722,  731,  723,
      724,  725,  732,  726,  733,  727,  734,  728,  729,  735,
      736,  737,  738,  739,  740,  741,  742,  743,  744,  745,
      746,  747,  748,  749,  750,  751,  730,  752,  731,  753,
      754,  755,  732,  756,  733,  757,  734,  758,  759,  735,
      736,  737,  738,  739,  740,  741,  742,  743,  744,  745,
      746,  747,  748,  749,  750,  751,  760,  752,  761,  753,
      754,  755,  762,  756,  763,  757,  764,  758,  759,  765,

      766,  767,  768,  769,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  760,  770,  761,  770,
      770,  770,  762,  770,  763,  770,  764,  770,  770,  765,
      766,  767,  768,  769,   55,   55,   55,   55,   59,  770,
       59,   59,  153,  153,  770,  153,    7,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770
    } ;

static const flex_int16_t yy_chk[1623] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    9,    9,   10,   10,   23,
       29,   23,   28,   28,   29,   28,   34,   30,   35,   37,
       29,   28,   38,   28,   30,   29,   51,   28,   28,   66,

       29,   30,   35,   67,   30,   57,   57,   30,  773,   60,
       29,   60,   28,   28,   29,   28,   34,   30,   35,   37,
       29,   28,   38,   28,   30,   29,   51,   28,   28,   66,
       29,   30,   35,   67,   30,   68,   32,   30,   31,   70,
       49,   43,   31,   36,   36,   71,   31,   32,   49,   32,
       36,   36,   31,   39,   72,   31,   36,   39,   43,   32,
       75,   39,   31,  587,  156,   68,   32,   39,   31,   70,
       49,   43,   31,   36,   36,   71,   31,   32,   49,   32,
       36,   36,   31,   39,   72,   31,   36,   39,   43,   32,
       75,   39,   31,   33,   40,   62,   61,   39,   40,   59,

       76,   33,   40,   78,   33,   56,   82,   33,   40,   83,
       33,   74,   45,   33,   69,   41,   45,   41,   74,   48,
       48,   85,   48,   33,   40,   48,   45,   69,   40,   41,
       76,   33,   40,   78,   33,   41,   82,   33,   40,   83,
       33,   74,   45,   33,   69,   41,   45,   41,   74,   48,
       48,   85,   48,   50,   50,   48,   45,   69,   73,   41,
       79,   86,   87,   81,   79,   41,   42,   80,   80,   80,
       88,   80,   73,   81,   42,   89,   42,   90,   42,   93,
       95,   42,   42,   50,   50,   97,   27,   25,   73,   21,
       79,   86,   87,   81,   79,   20,   42,   80,   80,   80,

       88,   80,   73,   81,   42,   89,   42,   90,   42,   93,
       95,   42,   42,   46,   11,   97,   46,   46,    7,   84,
       98,   46,   84,   99,   46,   46,    6,  101,   84,    5,
        0,   92,   96,    0,    0,   84,  103,   92,   96,   91,
        0,    0,   91,   46,   91,  104,   46,   46,   92,   84,
       98,   46,   84,   99,   46,   46,   47,  101,   84,   91,
       47,   92,   96,   47,   47,   84,  103,   92,   96,   91,
       47,   94,   91,   47,   91,  104,  100,   94,   92,  100,
      106,  107,  108,   94,    0,  109,   47,  110,  113,   91,
       47,  115,  113,   47,   47,  111,    0,  111,  116,    0,

       47,   94,    0,   47,    0,  112,  100,   94,  117,  100,
      106,  107,  108,   94,  105,  109,  112,  110,  113,  105,
      114,  115,  113,  118,  105,  111,  105,  111,  116,  105,
      105,  119,  105,  121,  114,  112,  123,  119,  117,  120,
      120,  124,  125,  126,  105,  127,  112,  128,  129,  105,
      114,  128,    0,  118,  105,    0,  105,    0,  131,  105,
      105,  119,  105,  121,  114,    0,  123,  119,  133,  120,
      120,  124,  125,  126,  132,  127,  134,  128,  129,  135,
      136,  128,  130,  132,  130,  130,  137,  130,  131,  138,
      139,  132,  140,  141,  144,  130,  143,  130,  133,  146,

      130,  139,    0,  147,  132,  148,  134,  149,  143,  135,
      136,  148,  130,  132,  130,  130,  137,  130,  150,  138,
      139,  132,  140,  141,  144,  130,  143,  130,  152,  146,
      130,  139,  145,  147,  145,  148,  151,  149,  143,  145,
      157,  148,  151,  159,  160,  161,  163,  165,  150,  145,
      166,  167,  168,  169,  170,  172,  173,  174,  152,  175,
      177,  171,  145,  171,  145,  178,  151,  179,  180,  145,
      157,    0,  151,  159,  160,  161,  163,  165,  171,  145,
      166,  167,  168,  169,  170,  172,  173,  174,  176,  175,
      177,  171,  182,  171,  184,  178,  185,  179,  180,  183,

      186,  176,  187,  183,  183,  188,  189,  183,  171,  190,
      191,  192,  194,  195,  196,  197,  198,  199,  176,  186,
      200,  196,  182,  201,  184,  202,  185,  203,  204,  183,
      186,  176,  187,  183,  183,  188,  189,  183,  206,  190,
      191,  192,  194,  195,  196,  197,  198,  199,  207,  186,
      200,  196,  205,  201,  205,  202,  208,  203,  204,  209,
      210,  211,  212,  213,  214,  215,  216,  217,  206,  218,
      219,  220,  221,  222,  223,  224,  225,  226,  207,  227,
      219,  229,  205,  230,  205,  232,  208,  233,  228,  209,
      210,  211,  212,  213,  214,  215,  216,  217,  228,  218,

      219,  220,  221,  222,  223,  224,  225,  226,  234,  227,
      219,  229,  235,  230,  236,  232,  237,  233,  228,  238,
      239,  240,  241,  242,  243,  244,  236,  245,  228,  246,
      247,  248,  249,  250,  251,  252,  253,  254,  234,  255,
      256,  257,  235,  260,  236,  262,  237,  258,  263,  238,
      239,  240,  241,  242,  243,  244,  236,  245,  258,  246,
      247,  248,  249,  250,  251,  252,  253,  254,  259,  255,
      256,  257,  264,  260,  259,  262,  265,  258,  263,  267,
      268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
      278,  277,  279,  280,  282,  281,  283,  284,  259,  285,

      286,  284,  264,  287,  259,  288,  265,  281,  289,  267,
      268,  269,  270,  271,  272,  273,  274,  275,  276,  277,
      278,  277,  279,  280,  282,  281,  283,  284,  290,  285,
      286,  284,  291,  287,  292,  288,  293,  281,  289,  294,
      295,  296,  297,  298,  299,  302,  303,  304,  305,  306,
      307,  309,  310,  311,  312,  313,  314,  315,  290,  316,
      317,  319,  291,  320,  292,  305,  293,  321,  323,  294,
      295,  296,  297,  298,  299,  302,  303,  304,  305,  306,
      307,  309,  310,  311,  312,  313,  314,  315,  326,  316,
      317,  319,  327,  320,  329,  305,  330,  321,  323,  331,

      332,  333,  334,  335,  336,  337,  338,  339,  340,  342,
      343,  345,  347,  348,  349,  350,  351,  352,  326,  353,
      356,  357,  327,  363,  329,  364,  330,  366,  367,  331,
      332,  333,  334,  335,  336,  337,  338,  339,  340,  342,
      343,  345,  347,  348,  349,  350,  351,  352,  354,  353,
      356,  357,  368,  363,  369,  364,  370,  366,  367,  354,
      371,  372,  373,  374,  376,  377,  378,  379,  380,  381,
      382,  384,  385,  386,  387,  389,  385,  390,  354,  391,
      392,  393,  368,  394,  369,  396,  370,  397,  398,  354,
      371,  372,  373,  374,  376,  377,  378,  379,  380,  381,

      382,  384,  385,  386,  387,  389,  385,  390,  399,  391,
      392,  393,  400,  394,  401,  396,  402,  397,  398,  403,
      404,  405,  408,  409,  411,  412,  405,  413,  414,  415,
      416,  417,  418,  419,  420,  421,  424,  425,  399,  426,
      428,  430,  400,  433,  401,  434,  402,  435,  436,  403,
      404,  405,  408,  409,  411,  412,  405,  413,  414,  415,
      416,  417,  418,  419,  420,  421,  424,  425,  437,  426,
      428,  430,  439,  433,  440,  434,  442,  435,  436,  443,
      444,  445,  446,  447,  449,  450,  451,  452,  453,  454,
      455,  456,  457,  458,  459,  460,  461,  462,  437,  463,

      464,  465,  439,  467,  440,  471,  442,  473,  474,  443,
      444,  445,  446,  447,  449,  450,  451,  452,  453,  454,
      455,  456,  457,  458,  459,  460,  461,  462,  475,  463,
      464,  465,  476,  467,  477,  471,  478,  473,  474,  479,
      480,  482,  483,  484,  485,  486,  487,  490,  492,  494,
      496,  497,  499,  501,  502,  503,    0,  507,  475,  508,
      509,  511,  476,  512,  477,  513,  478,  506,  514,  479,
      480,  482,  483,  484,  485,  486,  487,  490,  492,  494,
      496,  497,  499,  501,  502,  503,  506,  507,  515,  508,
      509,  511,  516,  512,  517,  513,  518,  506,  514,  519,

      520,  521,  522,  523,  524,  526,  527,  528,  529,  530,
      531,  532,  534,  535,  536,  538,  506,  539,  515,  540,
      542,  543,  516,  545,  517,  547,  518,  550,  551,  519,
      520,  521,  522,  523,  524,  526,  527,  528,  529,  530,
      531,  532,  534,  535,  536,  538,  552,  539,  554,  540,
      542,  543,  555,  545,  556,  547,  557,  550,  551,  559,
      560,  561,  562,  563,  564,  566,  567,  569,  571,  573,
      575,  577,  578,  579,  583,  584,  552,  585,  554,  586,
      588,  589,  555,  590,  556,  592,  557,  593,  595,  559,
      560,  561,  562,  563,  564,  566,  567,  569,  571,  573,

      575,  577,  578,  579,  583,  584,  596,  585,  597,  586,
      588,  589,  598,  590,  601,  592,  602,  593,  595,  603,
      604,  605,  606,  607,  608,  610,  611,  612,  614,  618,
      619,  620,  621,  622,  623,  625,  596,  626,  597,  628,
      630,  632,  598,  634,  601,  635,  602,  638,  639,  603,
      604,  605,  606,  607,  608,  610,  611,  612,  614,  618,
      619,  620,  621,  622,  623,  625,  641,  626,  642,  628,
      630,  632,  643,  634,  647,  635,  648,  638,  639,  651,
      653,  654,  656,  658,  659,  661,  663,  665,  667,  668,
      669,  674,  675,  676,  678,  679,  641,  680,  642,  682,

      683,  684,  643,  685,  647,  687,  648,  688,  689,  651,
      653,  654,  656,  658,  659,  661,  663,  665,  667,  668,
      669,  674,  675,  676,  678,  679,  691,  680,  692,  682,
      683,  684,  693,  685,  694,  687,  697,  688,  689,  699,
      700,  702,  704,  707,  708,  710,  711,  712,  713,  715,
      717,  718,  719,  720,  721,  722,  691,  724,  692,  727,
      728,  730,  693,  731,  694,  733,  697,  736,  737,  699,
      700,  702,  704,  707,  708,  710,  711,  712,  713,  715,
      717,  718,  719,  720,  721,  722,  738,  724,  743,  727,
      728,  730,  745,  731,  751,  733,  752,  736,  737,  757,

      760,  761,  767,  768,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  738,    0,  743,    0,
        0,    0,  745,    0,  751,    0,  752,    0,    0,  757,
      760,  761,  767,  768,  771,  771,  771,  771,  772,    0,
      772,  772,  774,  774,    0,  774,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,

      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex.l"
#line 2 "flex.l"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>
#include <string>
#include <cstring>
#define TOKEN(name) { return SQL_##name; }
static thread_local std::stringstream strbuf;
#line 1278 "flex_lexer.cpp"

#line 1280 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define singlequotedstring 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 26 "flex.l"

#line 1566 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 771 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 770 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "flex.l"
TOKEN(OP_NOTEQUAL)
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 28 "flex.l"
TOKEN(ENABLE)
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 29 "flex.l"
TOKEN(SIMPLE)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 30 "flex.l"
TOKEN(TEXT)
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 31 "flex.l"
TOKEN(OVER)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 32 "flex.l"
TOKEN(YEAR)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 33 "flex.l"
TOKEN(INSERT_METHOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 34 "flex.l"
TOKEN(OP_SEMI)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 35 "flex.l"
TOKEN(BIGINT)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 36 "flex.l"
TOKEN(LIMIT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 37 "flex.l"
TOKEN(OP_GREATERTHAN)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 38 "flex.l"
TOKEN(WITH)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 39 "flex.l"
TOKEN(ORDER)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 40 "flex.l"
TOKEN(OPTION)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 41 "flex.l"
TOKEN(LAST)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 42 "flex.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 43 "flex.l"
TOKEN(PRECEDING)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 44 "flex.l"
TOKEN(EXCEPT)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 45 "flex.l"
TOKEN(NUMERIC)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 46 "flex.l"
TOKEN(OP_LESSTHAN)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 47 "flex.l"
TOKEN(ACTION)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 48 "flex.l"
TOKEN(BEFORE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 49 "flex.l"
TOKEN(OP_GREATEREQ)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 50 "flex.l"
TOKEN(CHECK)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 51 "flex.l"
TOKEN(COMPACT)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 52 "flex.l"
TOKEN(FULL)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 53 "flex.l"
TOKEN(NATURAL)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 54 "flex.l"
TOKEN(BINARY)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 55 "flex.l"
TOKEN(NATIONAL)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 56 "flex.l"
TOKEN(ENUM)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 57 "flex.l"
TOKEN(REDUNDANT)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 58 "flex.l"
TOKEN(OP_ADD)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 59 "flex.l"
TOKEN(CURRENT)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 60 "flex.l"
TOKEN(MERGE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 61 "flex.l"
TOKEN(TRIGGER)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 62 "flex.l"
TOKEN(COMPRESSED)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 63 "flex.l"
TOKEN(OP_SUB)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 64 "flex.l"
TOKEN(FALSE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 65 "flex.l"
TOKEN(UNIQUE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 66 "flex.l"
TOKEN(WHERE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 67 "flex.l"
TOKEN(MINUTE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 68 "flex.l"
TOKEN(FIRST)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 69 "flex.l"
TOKEN(ON)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 70 "flex.l"
TOKEN(PARTIAL)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 71 "flex.l"
TOKEN(DOUBLE)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 72 "flex.l"
TOKEN(AFTER)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 73 "flex.l"
TOKEN(PRIMARY)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 74 "flex.l"
TOKEN(MONTH)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 75 "flex.l"
TOKEN(DEFERRED)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 76 "flex.l"
TOKEN(VALUES)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 77 "flex.l"
TOKEN(LONGTEXT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 78 "flex.l"
TOKEN(SQL)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 79 "flex.l"
TOKEN(SHARED)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 80 "flex.l"
TOKEN(VALIDATION)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 81 "flex.l"
TOKEN(OR)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 82 "flex.l"
TOKEN(VIEW)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 83 "flex.l"
TOKEN(INDEX)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 84 "flex.l"
TOKEN(GROUP)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 85 "flex.l"
TOKEN(OP_MUL)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 86 "flex.l"
TOKEN(INPLACE)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 87 "flex.l"
TOKEN(FOREIGN)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 88 "flex.l"
TOKEN(RESTRICT)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 89 "flex.l"
TOKEN(SPATIAL)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 90 "flex.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 91 "flex.l"
TOKEN(DEC)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 92 "flex.l"
TOKEN(SELECT)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 93 "flex.l"
TOKEN(NONE)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 94 "flex.l"
TOKEN(DISTINCT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 95 "flex.l"
TOKEN(TRUE)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 96 "flex.l"
TOKEN(DYNAMIC)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 97 "flex.l"
TOKEN(BY)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 98 "flex.l"
TOKEN(OP_MOD)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 99 "flex.l"
TOKEN(INTEGER)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 100 "flex.l"
TOKEN(SECURITY)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 101 "flex.l"
TOKEN(IS)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 102 "flex.l"
TOKEN(DEFINER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 103 "flex.l"
TOKEN(ROW)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 104 "flex.l"
TOKEN(ENFORCED)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 105 "flex.l"
TOKEN(END)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 106 "flex.l"
TOKEN(RECURSIVE)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 107 "flex.l"
TOKEN(FOR)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 108 "flex.l"
TOKEN(TEMPTABLE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 109 "flex.l"
TOKEN(UNION)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 110 "flex.l"
TOKEN(NULLS)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 111 "flex.l"
TOKEN(UPDATE)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 112 "flex.l"
TOKEN(ELSE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 113 "flex.l"
TOKEN(RANGE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 114 "flex.l"
TOKEN(SET)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 115 "flex.l"
TOKEN(INVOKER)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 116 "flex.l"
TOKEN(OFFSET)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 117 "flex.l"
TOKEN(INDEXED)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 118 "flex.l"
TOKEN(FORCE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 119 "flex.l"
TOKEN(NCHAR)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 120 "flex.l"
TOKEN(AND)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 121 "flex.l"
TOKEN(INITIALLY)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 122 "flex.l"
TOKEN(PRECISION)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 123 "flex.l"
TOKEN(FILTER)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 124 "flex.l"
TOKEN(WITHOUT)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 125 "flex.l"
TOKEN(NOT)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 126 "flex.l"
TOKEN(DELETE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 127 "flex.l"
TOKEN(DEFFERRABLE)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 128 "flex.l"
TOKEN(REAL)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 129 "flex.l"
TOKEN(THEN)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 130 "flex.l"
TOKEN(UNDEFINED)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 131 "flex.l"
TOKEN(DEFAULT)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 132 "flex.l"
TOKEN(CROSS)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 133 "flex.l"
TOKEN(CHAR)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 134 "flex.l"
TOKEN(REFERENCES)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 135 "flex.l"
TOKEN(OP_XOR)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 136 "flex.l"
TOKEN(CASE)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 137 "flex.l"
TOKEN(FIXED)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 138 "flex.l"
TOKEN(HOUR)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 139 "flex.l"
TOKEN(NO)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 140 "flex.l"
TOKEN(COLUMN)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 141 "flex.l"
TOKEN(LOCAL)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 142 "flex.l"
TOKEN(DROP)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 143 "flex.l"
TOKEN(REPLACE)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 144 "flex.l"
TOKEN(ASC)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 145 "flex.l"
TOKEN(OP_COMMA)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 146 "flex.l"
TOKEN(DISABLE)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 147 "flex.l"
TOKEN(TABLE)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 148 "flex.l"
TOKEN(ARRAY)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 149 "flex.l"
TOKEN(IF)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 150 "flex.l"
TOKEN(EXTRACT)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 151 "flex.l"
TOKEN(LEFT)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 152 "flex.l"
TOKEN(FULLTEXT)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 153 "flex.l"
TOKEN(HASH)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 154 "flex.l"
TOKEN(ALGORITHM)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 155 "flex.l"
TOKEN(LOCK)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 156 "flex.l"
TOKEN(DECIMAL)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 157 "flex.l"
TOKEN(PARTITION)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 158 "flex.l"
TOKEN(CASCADE)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 159 "flex.l"
TOKEN(ADD)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 160 "flex.l"
TOKEN(BETWEEN)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 161 "flex.l"
TOKEN(OP_LESSEQ)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 162 "flex.l"
TOKEN(MATCH)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 163 "flex.l"
TOKEN(ROWS)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 164 "flex.l"
TOKEN(JOIN)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 165 "flex.l"
TOKEN(LIKE)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 166 "flex.l"
TOKEN(OP_RP)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 167 "flex.l"
TOKEN(IGNORE)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 168 "flex.l"
TOKEN(INT)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 169 "flex.l"
TOKEN(UNSIGNED)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 170 "flex.l"
TOKEN(MEDIUMTEXT)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 171 "flex.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 172 "flex.l"
TOKEN(KEY)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 173 "flex.l"
TOKEN(EACH)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 174 "flex.l"
TOKEN(USING)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 175 "flex.l"
TOKEN(RENAME)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 176 "flex.l"
TOKEN(DO)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 177 "flex.l"
TOKEN(OP_LP)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 178 "flex.l"
TOKEN(CHARACTER)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 179 "flex.l"
TOKEN(UMINUS)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 180 "flex.l"
TOKEN(CAST)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 181 "flex.l"
TOKEN(MAX)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 182 "flex.l"
TOKEN(MIN)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 183 "flex.l"
TOKEN(DOT)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 184 "flex.l"
TOKEN(GROUPS)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 185 "flex.l"
TOKEN(OUTER)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 186 "flex.l"
TOKEN(NULL)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 187 "flex.l"
TOKEN(SMALLINT)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 188 "flex.l"
TOKEN(EXCLUSIVE)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 189 "flex.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 190 "flex.l"
TOKEN(CONSTRAINT)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 191 "flex.l"
TOKEN(CREATE)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 192 "flex.l"
TOKEN(OP_LBRACKET)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 193 "flex.l"
TOKEN(WHEN)
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 194 "flex.l"
TOKEN(IMMEDIATE)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 195 "flex.l"
TOKEN(TO)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 196 "flex.l"
TOKEN(BTREE)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 197 "flex.l"
TOKEN(DAY)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 198 "flex.l"
TOKEN(CONFLICT)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 199 "flex.l"
TOKEN(ROW_FORMAT)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 200 "flex.l"
TOKEN(OP_RBRACKET)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 201 "flex.l"
TOKEN(EXISTS)
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 202 "flex.l"
TOKEN(INSERT)
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 203 "flex.l"
TOKEN(KEYS)
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 204 "flex.l"
TOKEN(INTO)
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 205 "flex.l"
TOKEN(OP_DIVIDE)
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 206 "flex.l"
TOKEN(CASCADED)
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 207 "flex.l"
TOKEN(ISNULL)
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 208 "flex.l"
TOKEN(AS)
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 209 "flex.l"
TOKEN(INNER)
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 210 "flex.l"
TOKEN(INTERSECT)
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 211 "flex.l"
TOKEN(IN)
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 212 "flex.l"
TOKEN(OP_EQUAL)
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 213 "flex.l"
TOKEN(VARCHAR)
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 214 "flex.l"
TOKEN(COPY)
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 215 "flex.l"
TOKEN(ALTER)
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 216 "flex.l"
TOKEN(DESC)
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 217 "flex.l"
TOKEN(FROM)
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 218 "flex.l"
TOKEN(TINYTEXT)
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 219 "flex.l"
TOKEN(FLOAT)
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 220 "flex.l"
TOKEN(SECOND)
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 221 "flex.l"
TOKEN(WINDOW)
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 222 "flex.l"
TOKEN(NOTHING)
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 223 "flex.l"
TOKEN(HAVING)
	YY_BREAK
case 198:
#line 225 "flex.l"
case 199:
YY_RULE_SETUP
#line 225 "flex.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATLITERAL;
	}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 230 "flex.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTLITERAL;
	}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 235 "flex.l"
{
	std::string s(yytext);
	yylval->sval = strdup(s.substr(1, s.size()-1).c_str());
	return SQL_STRINGLITERAL;
	}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 241 "flex.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
	}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 246 "flex.l"
{
	BEGIN singlequotedstring; strbuf = std::stringstream{}; strbuf << '\'';
	}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 250 "flex.l"
{
	strbuf << '\'';
	}
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 254 "flex.l"
{
	strbuf << yytext;
	}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 258 "flex.l"
{
	BEGIN 0; 
	strbuf << '\'';
	yylval->sval = strdup(strbuf.str().c_str());
	return SQL_STRINGLITERAL;
	}
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 265 "flex.l"
{
	return 0;
	}
	YY_BREAK
case 207:
/* rule 207 can match eol */
YY_RULE_SETUP
#line 269 "flex.l"
{
	}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 272 "flex.l"
{
	return 0;
	}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 276 "flex.l"
ECHO;
	YY_BREAK
#line 2696 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 771 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 771 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 770);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 276 "flex.l"

